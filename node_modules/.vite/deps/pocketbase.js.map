{
  "version": 3,
  "sources": ["../../pocketbase/src/ClientResponseError.ts", "../../pocketbase/src/stores/utils/jwt.ts", "../../pocketbase/src/stores/utils/cookie.ts", "../../pocketbase/src/models/utils/BaseModel.ts", "../../pocketbase/src/models/Record.ts", "../../pocketbase/src/models/User.ts", "../../pocketbase/src/models/Admin.ts", "../../pocketbase/src/stores/BaseAuthStore.ts", "../../pocketbase/src/stores/LocalAuthStore.ts", "../../pocketbase/src/services/utils/BaseService.ts", "../../pocketbase/src/services/Settings.ts", "../../pocketbase/src/models/utils/ListResult.ts", "../../pocketbase/src/services/utils/BaseCrudService.ts", "../../pocketbase/src/services/utils/CrudService.ts", "../../pocketbase/src/services/Admins.ts", "../../pocketbase/src/models/ExternalAuth.ts", "../../pocketbase/src/services/Users.ts", "../../pocketbase/src/models/utils/SchemaField.ts", "../../pocketbase/src/models/Collection.ts", "../../pocketbase/src/services/Collections.ts", "../../pocketbase/src/services/Records.ts", "../../pocketbase/src/services/utils/SubCrudService.ts", "../../pocketbase/src/models/LogRequest.ts", "../../pocketbase/src/services/Logs.ts", "../../pocketbase/src/services/Realtime.ts", "../../pocketbase/src/Client.ts", "dep:pocketbase"],
  "sourcesContent": ["/**\n * ClientResponseError is a custom Error class that is intended to wrap\n * and normalize any error thrown by `Client.send()`.\n */\nexport default class ClientResponseError extends Error {\n    url: string                = '';\n    status: number             = 0;\n    data: {[key: string]: any} = {};\n    isAbort:  boolean          = false;\n    originalError: any         = null;\n\n    constructor(errData?: any) {\n        super(\"ClientResponseError\");\n\n        // Set the prototype explicitly.\n        // https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n        Object.setPrototypeOf(this, ClientResponseError.prototype);\n\n        if (!(errData instanceof ClientResponseError)) {\n            this.originalError = errData;\n        }\n\n        if (errData !== null && typeof errData === 'object') {\n            this.url    = typeof errData.url === 'string' ? errData.url : '';\n            this.status = typeof errData.status === 'number' ? errData.status : 0;\n            this.data   = errData.data !== null && typeof errData.data === 'object' ? errData.data : {};\n        }\n\n        if (typeof DOMException !== 'undefined' && errData instanceof DOMException) {\n            this.isAbort = true;\n        }\n\n        this.name = \"ClientResponseError \" + this.status;\n        this.message = this.data?.message || 'Something went wrong while processing your request.'\n    }\n\n    // Make a POJO's copy of the current error class instance.\n    // @see https://github.com/vuex-orm/vuex-orm/issues/255\n    toJSON () {\n        return { ...this };\n    }\n}\n", "let atobPolyfill: Function;\nif (typeof atob === 'function') {\n    atobPolyfill = atob\n} else {\n    atobPolyfill = (a: any) => Buffer.from(a, 'base64').toString('binary');\n}\n\n/**\n * Returns JWT token's payload data.\n */\nexport function getTokenPayload(token: string): { [key: string]: any } {\n    if (token) {\n        try {\n\n            let base64 = decodeURIComponent(atobPolyfill(token.split('.')[1]).split('').map(function (c: string) {\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n            }).join(''));\n\n            return JSON.parse(base64) || {};\n        } catch (e) {\n        }\n    }\n\n    return {};\n}\n\n/**\n * Checks whether a JWT token is expired or not.\n * Tokens without `exp` payload key are considered valid.\n * Tokens with empty payload (eg. invalid token strings) are considered expired.\n *\n * @param token The token to check.\n * @param [expirationThreshold] Time in seconds that will be subtracted from the token `exp` property.\n */\nexport function isTokenExpired(token: string, expirationThreshold = 0): boolean {\n    let payload = getTokenPayload(token);\n\n    if (\n        Object.keys(payload).length > 0 &&\n        (!payload.exp || (payload.exp - expirationThreshold) > (Date.now() / 1000))\n    ) {\n        return false;\n    }\n\n    return true;\n}\n", "/**\n * -------------------------------------------------------------------\n * Simple cookie parse and serialize utilities mostly based on the\n * node module https://github.com/jshttp/cookie.\n * -------------------------------------------------------------------\n */\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\nconst fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\nexport interface ParseOptions{\n    decode?: (val: string) => string,\n}\n\n/**\n* Parses the given cookie header string into an object\n* The object has the various cookies as keys(names) => values\n*/\nexport function cookieParse(str: string, options?: ParseOptions): { [key: string]: any }  {\n    const result: { [key: string]: any } = {};\n\n    if (typeof str !== 'string') {\n        return result;\n    }\n\n    const opt    = Object.assign({}, options || {});\n    const decode = opt.decode || defaultDecode;\n\n    let index = 0;\n    while (index < str.length) {\n        const eqIdx = str.indexOf('=', index);\n\n        // no more cookie pairs\n        if (eqIdx === -1) {\n            break;\n        }\n\n        let endIdx = str.indexOf(';', index);\n\n        if (endIdx === -1) {\n            endIdx = str.length;\n        } else if (endIdx < eqIdx) {\n            // backtrack on prior semicolon\n            index = str.lastIndexOf(';', eqIdx - 1) + 1;\n            continue;\n        }\n\n        const key = str.slice(index, eqIdx).trim();\n\n        // only assign once\n        if (undefined === result[key]) {\n            let val = str.slice(eqIdx + 1, endIdx).trim();\n\n            // quoted values\n            if (val.charCodeAt(0) === 0x22) {\n                val = val.slice(1, -1);\n            }\n\n            try {\n                result[key] = decode(val);\n            } catch (_) {\n                result[key] = val; // no decoding\n            }\n        }\n\n        index = endIdx + 1;\n    }\n\n    return result;\n};\n\nexport interface SerializeOptions{\n    encode?:   (val: string | number | boolean) => string,\n    maxAge?:   number,\n    domain?:   string,\n    path?:     string,\n    expires?:  Date,\n    httpOnly?: boolean,\n    secure?:   boolean,\n    priority?: string,\n    sameSite?: boolean|string,\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * ```js\n * cookieSerialize('foo', 'bar', { httpOnly: true }) // \"foo=bar; httpOnly\"\n * ```\n */\nexport function cookieSerialize(name: string, val: string, options?: SerializeOptions): string {\n    const opt    = Object.assign({}, options || {});\n    const encode = opt.encode || defaultEncode;\n\n    if (!fieldContentRegExp.test(name)) {\n        throw new TypeError('argument name is invalid');\n    }\n\n    const value = encode(val);\n\n    if (value && !fieldContentRegExp.test(value)) {\n        throw new TypeError('argument val is invalid');\n    }\n\n    let result = name + '=' + value;\n\n    if (opt.maxAge != null) {\n        const maxAge = opt.maxAge - 0;\n\n        if (isNaN(maxAge) || !isFinite(maxAge)) {\n            throw new TypeError('option maxAge is invalid');\n        }\n\n        result += '; Max-Age=' + Math.floor(maxAge);\n    }\n\n    if (opt.domain) {\n        if (!fieldContentRegExp.test(opt.domain)) {\n            throw new TypeError('option domain is invalid');\n        }\n\n        result += '; Domain=' + opt.domain;\n    }\n\n    if (opt.path) {\n        if (!fieldContentRegExp.test(opt.path)) {\n            throw new TypeError('option path is invalid');\n        }\n\n        result += '; Path=' + opt.path;\n    }\n\n    if (opt.expires) {\n        if (!isDate(opt.expires) || isNaN(opt.expires.valueOf())) {\n            throw new TypeError('option expires is invalid');\n        }\n\n        result += '; Expires=' + opt.expires.toUTCString();\n    }\n\n    if (opt.httpOnly) {\n        result += '; HttpOnly';\n    }\n\n    if (opt.secure) {\n        result += '; Secure';\n    }\n\n    if (opt.priority) {\n        const priority = typeof opt.priority === 'string' ? opt.priority.toLowerCase() : opt.priority;\n\n        switch (priority) {\n            case 'low':\n                result += '; Priority=Low';\n                break;\n            case 'medium':\n                result += '; Priority=Medium';\n                break;\n            case 'high':\n                result += '; Priority=High';\n                break;\n            default:\n                throw new TypeError('option priority is invalid');\n        }\n    }\n\n    if (opt.sameSite) {\n        const sameSite = typeof opt.sameSite === 'string' ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n        switch (sameSite) {\n            case true:\n                result += '; SameSite=Strict';\n                break;\n            case 'lax':\n                result += '; SameSite=Lax';\n                break;\n            case 'strict':\n                result += '; SameSite=Strict';\n                break;\n            case 'none':\n                result += '; SameSite=None';\n                break;\n            default:\n                throw new TypeError('option sameSite is invalid');\n        }\n    }\n\n    return result;\n};\n\n/**\n * Default URL-decode string value function.\n * Optimized to skip native call when no `%`.\n */\nfunction defaultDecode(val: string): string {\n    return val.indexOf('%') !== -1\n        ? decodeURIComponent(val)\n        : val;\n}\n\n/**\n * Default URL-encode value function.\n */\nfunction defaultEncode(val: string | number | boolean): string {\n    return encodeURIComponent(val);\n}\n\n/**\n * Determines if value is a Date.\n */\nfunction isDate(val: any): boolean {\n    return (\n        Object.prototype.toString.call(val) === '[object Date]' ||\n        val instanceof Date\n    );\n}\n", "export default abstract class BaseModel {\n    id!:      string;\n    created!: string;\n    updated!: string;\n\n    constructor(data: { [key: string]: any } = {}) {\n        this.load(data || {});\n    }\n\n    /**\n     * Loads `data` into the current model.\n     */\n    load(data: { [key: string]: any }) {\n        this.id = typeof data.id !== 'undefined' ? data.id : '';\n        this.created = typeof data.created !== 'undefined' ? data.created : '';\n        this.updated = typeof data.updated !== 'undefined' ? data.updated : '';\n    }\n\n    /**\n     * Returns whether the current loaded data represent a stored db record.\n     */\n    get isNew(): boolean {\n        return (\n            // id is not set\n            !this.id ||\n            // zero uuid value\n            this.id === '00000000-0000-0000-0000-000000000000'\n        );\n    }\n\n    /**\n     * Robust deep clone of a model.\n     */\n    clone(): BaseModel {\n        return new (this.constructor as any)(JSON.parse(JSON.stringify(this)));\n    }\n\n    /**\n     * Exports all model properties as a new plain object.\n     */\n    export(): { [key: string]: any } {\n        return Object.assign({}, this);\n    }\n}\n", "import BaseModel from '@/models/utils/BaseModel';\n\nexport default class Record extends BaseModel {\n    [key: string]: any,\n\n    '@collectionId'!:   string;\n    '@collectionName'!: string;\n    '@expand'!:         {[key: string]: any};\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        for (const [key, value] of Object.entries(data)) {\n            this[key] = value;\n        }\n\n        // normalize common fields\n        this['@collectionId']   = typeof data['@collectionId']   !== 'undefined' ? data['@collectionId']   : '';\n        this['@collectionName'] = typeof data['@collectionName'] !== 'undefined' ? data['@collectionName'] : '';\n        this['@expand']         = typeof data['@expand']         !== 'undefined' ? data['@expand']         : {};\n    }\n}\n", "import BaseModel from '@/models/utils/BaseModel';\nimport Record    from '@/models/Record';\n\nexport default class User extends BaseModel {\n    email!:                  string;\n    verified!:               boolean;\n    lastResetSentAt!:        string;\n    lastVerificationSentAt!: string;\n    profile!:                null|Record;\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        this.email = typeof data.email === 'string' ? data.email : '';\n        this.verified = !!data.verified;\n        this.lastResetSentAt = typeof data.lastResetSentAt === 'string' ? data.lastResetSentAt : '';\n        this.lastVerificationSentAt = typeof data.lastVerificationSentAt === 'string' ? data.lastVerificationSentAt : '';\n        this.profile = data.profile ? new Record(data.profile) : null;\n    }\n}\n", "import BaseModel from '@/models/utils/BaseModel';\n\nexport default class Admin extends BaseModel {\n    avatar!:          number;\n    email!:           string;\n    lastResetSentAt!: string;\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        this.avatar = typeof data.avatar === 'number' ? data.avatar : 0;\n        this.email  = typeof data.email  === 'string' ? data.email  : '';\n        this.lastResetSentAt = typeof data.lastResetSentAt === 'string' ? data.lastResetSentAt : '';\n    }\n}\n", "import { cookieParse, cookieSerialize, SerializeOptions } from '@/stores/utils/cookie';\nimport { isTokenExpired, getTokenPayload } from '@/stores/utils/jwt';\nimport User  from '@/models/User';\nimport Admin from '@/models/Admin';\n\ntype onChangeFunc = (token: string, model: User|Admin|null) => void;\n\nconst defaultCookieKey = 'pb_auth';\n\n/**\n * Base AuthStore class that is intended to be extended by all other\n * PocketBase AuthStore implementations.\n */\nexport default abstract class BaseAuthStore {\n    protected baseToken: string = '';\n    protected baseModel: User|Admin|null = null;\n\n    private _onChangeCallbacks: Array<onChangeFunc> = [];\n\n    /**\n     * Retrieves the stored token (if any).\n     */\n    get token(): string {\n        return this.baseToken;\n    }\n\n    /**\n     * Retrieves the stored model data (if any).\n     */\n    get model(): User|Admin|null {\n        return this.baseModel;\n    }\n\n    /**\n     * Checks if the store has valid (aka. existing and unexpired) token.\n     */\n    get isValid(): boolean {\n        return !isTokenExpired(this.token);\n    }\n\n    /**\n     * Saves the provided new token and model data in the auth store.\n     */\n    save(token: string, model: User|Admin|null): void {\n        this.baseToken = token || '';\n\n        // normalize the model instance\n        if (model !== null && typeof model === 'object') {\n            this.baseModel = (model as any)?.verified !== 'undefined' ?\n                new User(model) : new Admin(model);\n        } else {\n            this.baseModel = null;\n        }\n\n        this.triggerChange();\n    }\n\n    /**\n     * Removes the stored token and model data form the auth store.\n     */\n    clear(): void {\n        this.baseToken = '';\n        this.baseModel = null;\n        this.triggerChange();\n    }\n\n    /**\n     * Parses the provided cookie string and updates the store state\n     * with the cookie's token and model data.\n     */\n    loadFromCookie(cookie: string, key = defaultCookieKey): void {\n        const rawData = cookieParse(cookie || '')[key] || '';\n\n        let data: { [key: string]: any } = {};\n        try {\n            data = JSON.parse(rawData);\n            // normalize\n            if (typeof data === null || typeof data !== 'object' || Array.isArray(data)) {\n                data = {};\n            }\n        } catch (_) {}\n\n        this.save(data.token || '', data.model || {});\n    }\n\n    /**\n     * Exports the current store state as cookie string.\n     *\n     * By default the following optional attributes are added:\n     * - Secure\n     * - HttpOnly\n     * - SameSite=Strict\n     * - Path=/\n     * - Expires={the token expiration date}\n     *\n     * NB! If the generated cookie exceeds 4096 bytes, this method will\n     * strip the model data to the bare minimum to try to fit within the\n     * recommended size in https://www.rfc-editor.org/rfc/rfc6265#section-6.1.\n     */\n    exportToCookie(options?: SerializeOptions, key = defaultCookieKey): string {\n        const defaultOptions: SerializeOptions = {\n            secure:   true,\n            sameSite: true,\n            httpOnly: true,\n            path:     \"/\",\n        };\n\n        // extract the token expiration date\n        const payload = getTokenPayload(this.token);\n        if (payload?.exp) {\n            defaultOptions.expires = new Date(payload.exp * 1000);\n        } else {\n            defaultOptions.expires = new Date('1970-01-01');\n        }\n\n        // merge with the user defined options\n        options = Object.assign({}, defaultOptions, options);\n\n        const rawData = {\n            token: this.token,\n            model: this.model?.export() || null,\n        };\n\n        let result = cookieSerialize(key, JSON.stringify(rawData), options);\n\n        const resultLength = typeof Blob !== 'undefined' ?\n            (new Blob([result])).size : result.length;\n\n        // strip down the model data to the bare minimum\n        if (rawData.model && resultLength > 4096) {\n            rawData.model = {id: rawData?.model?.id, email: rawData?.model?.email};\n            if (this.model instanceof User) {\n                rawData.model.verified = this.model.verified;\n            }\n            result = cookieSerialize(key, JSON.stringify(rawData), options)\n        }\n\n        return result;\n    }\n\n    /**\n     * Register a callback function that will be called on store change.\n     *\n     * Returns a removal function that you could call to \"unsubscribe\" from the changes.\n     */\n    onChange(callback: () => void): () => void {\n        this._onChangeCallbacks.push(callback);\n\n        return () => {\n            for (let i = this._onChangeCallbacks.length - 1; i >= 0; i--) {\n                if (this._onChangeCallbacks[i] == callback) {\n                    delete this._onChangeCallbacks[i];    // removes the function reference\n                    this._onChangeCallbacks.splice(i, 1); // reindex the array\n                    return;\n                }\n            }\n        }\n    }\n\n    protected triggerChange(): void {\n        for (const callback of this._onChangeCallbacks) {\n            callback && callback(this.token, this.model);\n        }\n    }\n}\n", "import BaseAuthStore from '@/stores/BaseAuthStore';\nimport User          from '@/models/User';\nimport Admin         from '@/models/Admin';\n\n/**\n * The default token store for browsers with auto fallback\n * to runtime/memory if local storage is undefined (eg. in node env).\n */\nexport default class LocalAuthStore extends BaseAuthStore {\n    private storageFallback: { [key: string]: any } = {};\n    private storageKey: string\n\n    constructor(storageKey = \"pocketbase_auth\") {\n        super();\n\n        this.storageKey = storageKey;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get token(): string {\n        const data = this._storageGet(this.storageKey) || {};\n\n        return data.token || '';\n    }\n\n    /**\n     * @inheritdoc\n     */\n    get model(): User|Admin|null {\n        const data = this._storageGet(this.storageKey) || {};\n\n        if (\n            data === null ||\n            typeof data !== 'object' ||\n            data.model === null ||\n            typeof data.model !== 'object'\n        ) {\n            return null;\n        }\n\n        // admins don't have `verified` prop\n        if (typeof data.model?.verified !== 'undefined') {\n            return new User(data.model);\n        }\n\n        return new Admin(data.model);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    save(token: string, model: User|Admin|null) {\n        this._storageSet(this.storageKey, {\n            'token': token,\n            'model': model,\n        });\n\n        super.save(token, model);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    clear() {\n        this._storageRemove(this.storageKey);\n\n        super.clear();\n    }\n\n    // ---------------------------------------------------------------\n    // Internal helpers:\n    // ---------------------------------------------------------------\n\n    /**\n     * Retrieves `key` from the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageGet(key: string): any {\n        if (typeof window !== 'undefined' && window?.localStorage) {\n            const rawValue = window?.localStorage?.getItem(key) || '';\n            try {\n                return JSON.parse(rawValue);\n            } catch (e) { // not a json\n                return rawValue;\n            }\n        }\n\n        // fallback\n        return this.storageFallback[key];\n    }\n\n    /**\n     * Stores a new data in the browser's local storage\n     * (or runtime/memory if local storage is undefined).\n     */\n    private _storageSet(key: string, value: any) {\n        if (typeof window !== 'undefined' && window?.localStorage) {\n            // store in local storage\n            let normalizedVal = value;\n            if (typeof value !== 'string') {\n                normalizedVal = JSON.stringify(value);\n            }\n            window?.localStorage?.setItem(key, normalizedVal);\n        } else {\n            // store in fallback\n            this.storageFallback[key] = value;\n        }\n    }\n\n    /**\n     * Removes `key` from the browser's local storage and the runtime/memory.\n     */\n    private _storageRemove(key: string) {\n        // delete from local storage\n        if (typeof window !== 'undefined') {\n            window?.localStorage?.removeItem(key);\n        }\n\n        // delete from fallback\n        delete this.storageFallback[key];\n    }\n}\n", "import Client from '@/Client';\n\n/**\n * BaseService class that should be inherited from all API services.\n */\nexport default abstract class BaseService {\n    readonly client: Client\n\n    constructor(client: Client) {\n        this.client = client;\n    }\n}\n", "import BaseService from '@/services/utils/BaseService';\n\nexport default class Settings extends BaseService {\n    /**\n     * Fetch all available app settings.\n     */\n    getAll(queryParams = {}): Promise<{ [key: string]: any }> {\n        return this.client.send('/api/settings', {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData) => responseData || {});\n    }\n\n    /**\n     * Bulk updates app settings.\n     */\n    update(bodyParams = {}, queryParams = {}): Promise<{ [key: string]: any }> {\n        return this.client.send('/api/settings', {\n            'method': 'PATCH',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then((responseData) => responseData || {});\n    }\n\n    /**\n     * Performs a S3 storage connection test.\n     */\n    testS3(queryParams = {}): Promise<boolean> {\n        return this.client.send('/api/settings/test/s3', {\n            'method': 'POST',\n            'params': queryParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Sends a test email.\n     *\n     * The possible `emailTemplate` values are:\n     * - verification\n     * - password-reset\n     * - email-change\n     */\n    testEmail(toEmail: string, emailTemplate: string, queryParams = {}): Promise<boolean> {\n        const bodyParams = {\n            'email':    toEmail,\n            'template': emailTemplate,\n        };\n\n        return this.client.send('/api/settings/test/email', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n}\n", "import BaseModel from './BaseModel';\n\nexport default class ListResult<M extends BaseModel> {\n    page!: number;\n    perPage!: number;\n    totalItems!: number;\n    totalPages!: number;\n    items!: Array<M>;\n\n    constructor(\n        page: number,\n        perPage: number,\n        totalItems: number,\n        totalPages: number,\n        items: Array<M>,\n    ) {\n        this.page = page > 0 ? page : 1;\n        this.perPage = perPage >= 0 ? perPage : 0;\n        this.totalItems = totalItems >= 0 ? totalItems : 0;\n        this.totalPages = totalPages >= 0 ? totalPages : 0;\n        this.items = items || [];\n    }\n}\n", "import BaseModel   from '@/models/utils/BaseModel';\nimport ListResult  from '@/models/utils/ListResult';\nimport BaseService from '@/services/utils/BaseService';\n\nexport default abstract class BaseCrudService<M extends BaseModel> extends BaseService {\n    /**\n     * Response data decoder.\n     */\n    abstract decode(data: { [key: string]: any }): M\n\n    /**\n     * Returns a promise with all list items batch fetched at once.\n     */\n    protected _getFullList(basePath: string, batchSize = 100, queryParams = {}): Promise<Array<M>> {\n        var result: Array<M> = [];\n\n        let request = async (page: number): Promise<Array<any>> => {\n            return this._getList(basePath, page, batchSize, queryParams).then((list) => {\n                const castedList = (list as ListResult<M>);\n                const items = castedList.items;\n                const totalItems = castedList.totalItems;\n\n                result = result.concat(items);\n\n                if (items.length && totalItems > result.length) {\n                    return request(page + 1);\n                }\n\n                return result;\n            });\n        }\n\n        return request(1);\n    }\n\n    /**\n     * Returns paginated items list.\n     */\n    protected _getList(basePath: string, page = 1, perPage = 30, queryParams = {}): Promise<ListResult<M>> {\n        queryParams = Object.assign({\n            'page':    page,\n            'perPage': perPage,\n        }, queryParams);\n\n        return this.client.send(basePath, {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData: any) => {\n            const items: Array<M> = [];\n            if (responseData?.items) {\n                responseData.items = responseData.items || [];\n                for (const item of responseData.items) {\n                    items.push(this.decode(item));\n                }\n            }\n\n            return new ListResult<M>(\n                responseData?.page || 1,\n                responseData?.perPage || 0,\n                responseData?.totalItems || 0,\n                responseData?.totalPages || 0,\n                items,\n            );\n        });\n    }\n\n    /**\n     * Returns single item by its id.\n     */\n    protected _getOne(basePath: string, id: string, queryParams = {}): Promise<M> {\n        return this.client.send(basePath + '/' + encodeURIComponent(id), {\n            'method': 'GET',\n            'params': queryParams\n        }).then((responseData: any) => this.decode(responseData));\n    }\n\n    /**\n     * Creates a new item.\n     */\n    protected _create(basePath: string, bodyParams = {}, queryParams = {}): Promise<M> {\n        return this.client.send(basePath, {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then((responseData: any) => this.decode(responseData));\n    }\n\n    /**\n     * Updates an existing item by its id.\n     */\n    protected _update(basePath: string, id: string, bodyParams = {}, queryParams = {}): Promise<M> {\n        return this.client.send(basePath + '/' + encodeURIComponent(id), {\n            'method': 'PATCH',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then((responseData: any) => this.decode(responseData));\n    }\n\n    /**\n     * Deletes an existing item by its id.\n     */\n    protected _delete(basePath: string, id: string, queryParams = {}): Promise<boolean> {\n        return this.client.send(basePath + '/' + encodeURIComponent(id), {\n            'method': 'DELETE',\n            'params': queryParams,\n        }).then(() => true);\n    }\n}\n", "import ListResult      from '@/models/utils/ListResult';\nimport BaseModel       from '@/models/utils/BaseModel';\nimport BaseCrudService from '@/services/utils/BaseCrudService';\n\nexport default abstract class CrudService<M extends BaseModel> extends BaseCrudService<M> {\n    /**\n     * Base path for the crud actions (without trailing slash, eg. '/admins').\n     */\n    abstract baseCrudPath(): string\n\n    /**\n     * Returns a promise with all list items batch fetched at once.\n     */\n    getFullList(batchSize = 100, queryParams = {}): Promise<Array<M>> {\n        return this._getFullList(this.baseCrudPath(), batchSize, queryParams);\n    }\n\n    /**\n     * Returns paginated items list.\n     */\n    getList(page = 1, perPage = 30, queryParams = {}): Promise<ListResult<M>> {\n        return this._getList(this.baseCrudPath(), page, perPage, queryParams);\n    }\n\n    /**\n     * Returns single item by its id.\n     */\n    getOne(id: string, queryParams = {}): Promise<M> {\n        return this._getOne(this.baseCrudPath(), id, queryParams);\n    }\n\n    /**\n     * Creates a new item.\n     */\n    create(bodyParams = {}, queryParams = {}): Promise<M> {\n        return this._create(this.baseCrudPath(), bodyParams, queryParams);\n    }\n\n    /**\n     * Updates an existing item by its id.\n     */\n    update(id: string, bodyParams = {}, queryParams = {}): Promise<M> {\n        return this._update(this.baseCrudPath(), id, bodyParams, queryParams);\n    }\n\n    /**\n     * Deletes an existing item by its id.\n     */\n    delete(id: string, queryParams = {}): Promise<boolean> {\n        return this._delete(this.baseCrudPath(), id, queryParams);\n    }\n}\n", "import CrudService from '@/services/utils/CrudService';\nimport Admin       from '@/models/Admin';\n\nexport type AdminAuthResponse = {\n    [key: string]: any,\n    token: string,\n    admin: Admin,\n}\n\nexport default class Admins extends CrudService<Admin> {\n    /**\n     * @inheritdoc\n     */\n    decode(data: { [key: string]: any }): Admin {\n        return new Admin(data);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    baseCrudPath(): string {\n        return '/api/admins';\n    }\n\n    /**\n     * Prepare successful authorize response.\n     */\n    protected authResponse(responseData: any): AdminAuthResponse {\n        const admin = this.decode(responseData?.admin || {});\n\n        if (responseData?.token && responseData?.admin) {\n            this.client.authStore.save(responseData.token, admin);\n        }\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            'token': responseData?.token || '',\n            'admin': admin,\n        });\n    }\n\n    /**\n     * Authenticate an admin account by its email and password\n     * and returns a new admin token and data.\n     *\n     * On success this method automatically updates the client's AuthStore data.\n     */\n    authViaEmail(\n        email: string,\n        password: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<AdminAuthResponse> {\n        bodyParams = Object.assign({\n            'email':    email,\n            'password': password,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/auth-via-email', {\n            'method':  'POST',\n            'params':  queryParams,\n            'body':    bodyParams,\n            'headers': {\n                'Authorization': '',\n            },\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Refreshes the current admin authenticated instance and\n     * returns a new token and admin data.\n     *\n     * On success this method automatically updates the client's AuthStore data.\n     */\n    refresh(bodyParams = {}, queryParams = {}): Promise<AdminAuthResponse> {\n        return this.client.send(this.baseCrudPath() + '/refresh', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Sends admin password reset request.\n     */\n    requestPasswordReset(\n        email: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'email': email,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/request-password-reset', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Confirms admin password reset request.\n     */\n    confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<AdminAuthResponse> {\n        bodyParams = Object.assign({\n            'token':           passwordResetToken,\n            'password':        password,\n            'passwordConfirm': passwordConfirm,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/confirm-password-reset', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(this.authResponse.bind(this));\n    }\n}\n", "import BaseModel from '@/models/utils/BaseModel';\n\nexport default class ExternalAuth extends BaseModel {\n    userId!:     string;\n    provider!:   string;\n    providerId!: string;\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        this.userId     = typeof data.userId === 'string'     ? data.userId     : '';\n        this.provider   = typeof data.provider === 'string'   ? data.provider   : '';\n        this.providerId = typeof data.providerId === 'string' ? data.providerId : '';\n    }\n}\n", "import CrudService  from '@/services/utils/CrudService';\nimport User         from '@/models/User';\nimport ExternalAuth from '@/models/ExternalAuth';\n\nexport type UserAuthResponse = {\n    [key: string]: any,\n    token:         string,\n    user:          User,\n}\n\nexport type AuthProviderInfo = {\n    name:                string,\n    state:               string,\n    codeVerifier:        string,\n    codeChallenge:       string,\n    codeChallengeMethod: string,\n    authUrl:             string,\n}\n\nexport type AuthMethodsList = {\n    [key: string]: any,\n    emailPassword: boolean,\n    authProviders: Array<AuthProviderInfo>,\n}\n\nexport default class Users extends CrudService<User> {\n    /**\n     * @inheritdoc\n     */\n    decode(data: { [key: string]: any }): User {\n        return new User(data);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    baseCrudPath(): string {\n        return '/api/users';\n    }\n\n    /**\n     * Prepare successful authorization response.\n     */\n    protected authResponse(responseData: any): UserAuthResponse {\n        const user = this.decode(responseData?.user || {});\n\n        if (responseData?.token && responseData?.user) {\n            this.client.authStore.save(responseData.token, user);\n        }\n\n        return Object.assign({}, responseData, {\n            // normalize common fields\n            'token': responseData?.token || '',\n            'user':  user,\n        });\n    }\n\n    /**\n     * Returns all available application auth methods.\n     */\n    listAuthMethods(queryParams = {}): Promise<AuthMethodsList> {\n        return this.client.send(this.baseCrudPath() + '/auth-methods', {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData: any) => {\n            return Object.assign({}, responseData, {\n                // normalize common fields\n                'emailPassword':  !!responseData?.emailPassword,\n                'authProviders': Array.isArray(responseData?.authProviders) ? responseData?.authProviders : [],\n            });\n        });\n    }\n\n    /**\n     * Authenticate a user via its email and password.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - new user authentication token\n     * - the authenticated user model record\n     */\n    authViaEmail(\n        email: string,\n        password: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<UserAuthResponse> {\n        bodyParams = Object.assign({\n            'email':    email,\n            'password': password,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/auth-via-email', {\n            'method':  'POST',\n            'params':  queryParams,\n            'body':    bodyParams,\n            'headers': {\n                'Authorization': '',\n            },\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Authenticate a user via OAuth2 client provider.\n     *\n     * On success, this method also automatically updates\n     * the client's AuthStore data and returns:\n     * - new user authentication token\n     * - the authenticated user model record\n     * - the OAuth2 user profile data (eg. name, email, avatar, etc.)\n     */\n    authViaOAuth2(\n        provider: string,\n        code: string,\n        codeVerifier: string,\n        redirectUrl: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<UserAuthResponse> {\n        bodyParams = Object.assign({\n            'provider':     provider,\n            'code':         code,\n            'codeVerifier': codeVerifier,\n            'redirectUrl':  redirectUrl,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/auth-via-oauth2', {\n            'method':  'POST',\n            'params':  queryParams,\n            'body':    bodyParams,\n            'headers': {\n                'Authorization': '',\n            },\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Refreshes the current user authenticated instance and\n     * returns a new token and user data.\n     *\n     * On success this method also automatically updates the client's AuthStore data.\n     */\n    refresh(bodyParams = {}, queryParams = {}): Promise<UserAuthResponse> {\n        return this.client.send(this.baseCrudPath() + '/refresh', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Sends user password reset request.\n     */\n    requestPasswordReset(\n        email: string,\n        bodyParams  = {},\n        queryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'email': email,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/request-password-reset', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Confirms user password reset request.\n     */\n    confirmPasswordReset(\n        passwordResetToken: string,\n        password: string,\n        passwordConfirm: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<UserAuthResponse> {\n        bodyParams = Object.assign({\n            'token':           passwordResetToken,\n            'password':        password,\n            'passwordConfirm': passwordConfirm,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/confirm-password-reset', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Sends user verification email request.\n     */\n    requestVerification(\n        email: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'email': email,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/request-verification', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Confirms user email verification request.\n     */\n    confirmVerification(\n        verificationToken: string,\n        bodyParams  = {},\n        queryParams = {},\n    ): Promise<UserAuthResponse> {\n        bodyParams = Object.assign({\n            'token': verificationToken,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/confirm-verification', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Sends an email change request to the authenticated user.\n     */\n    requestEmailChange(\n        newEmail: string,\n        bodyParams = {},\n        queryParams = {},\n    ): Promise<boolean> {\n        bodyParams = Object.assign({\n            'newEmail': newEmail,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/request-email-change', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(() => true);\n    }\n\n    /**\n     * Confirms user new email address.\n     */\n    confirmEmailChange(\n        emailChangeToken: string,\n        password: string,\n        bodyParams  = {},\n        queryParams = {},\n    ): Promise<UserAuthResponse> {\n        bodyParams = Object.assign({\n            'token': emailChangeToken,\n            'password': password,\n        }, bodyParams);\n\n        return this.client.send(this.baseCrudPath() + '/confirm-email-change', {\n            'method': 'POST',\n            'params': queryParams,\n            'body':   bodyParams,\n        }).then(this.authResponse.bind(this));\n    }\n\n    /**\n     * Lists all linked external auth providers for the specified user.\n     */\n    listExternalAuths(\n        userId: string,\n        queryParams = {}\n    ): Promise<Array<ExternalAuth>> {\n        return this.client.send(this.baseCrudPath() + '/' + encodeURIComponent(userId) + '/external-auths', {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData) => {\n            const items: Array<ExternalAuth> = [];\n\n            if (Array.isArray(responseData)) {\n                for (const item of responseData) {\n                    items.push(new ExternalAuth(item));\n                }\n            }\n\n            return items;\n        });\n    }\n\n    /**\n     * Unlink a single external auth provider from the specified user.\n     */\n    unlinkExternalAuth(\n        userId: string,\n        provider: string,\n        queryParams = {}\n    ): Promise<boolean> {\n        return this.client.send(this.baseCrudPath() + '/' + encodeURIComponent(userId) + '/external-auths/' + encodeURIComponent(provider), {\n            'method': 'DELETE',\n            'params': queryParams,\n        }).then(() => true);\n    }\n}\n", "export default class SchemaField {\n    id!:       string;\n    name!:     string;\n    type!:     string;\n    system!:   boolean;\n    required!: boolean;\n    unique!:   boolean;\n    options!:  { [key: string]: any };\n\n    constructor(data: { [key: string]: any } = {}) {\n        this.load(data || {});\n    }\n\n    /**\n     * Loads `data` into the field.\n     */\n    load(data: { [key: string]: any }) {\n        this.id       = typeof data.id !== 'undefined' ? data.id : '';\n        this.name     = typeof data.name !== 'undefined' ? data.name : '';\n        this.type     = typeof data.type !== 'undefined' ? data.type : 'text';\n        this.system   = !!data.system;\n        this.required = !!data.required;\n        this.unique   = !!data.unique;\n        this.options  = typeof data.options === 'object' && data.options !== null ? data.options : {};\n    }\n}\n", "import BaseModel   from '@/models/utils/BaseModel';\nimport SchemaField from '@/models/utils/SchemaField';\n\nexport default class Collection extends BaseModel {\n    name!:       string;\n    schema!:     Array<SchemaField>;\n    system!:     boolean;\n    listRule!:   null|string;\n    viewRule!:   null|string;\n    createRule!: null|string;\n    updateRule!: null|string;\n    deleteRule!: null|string;\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        this.name   = typeof data.name === 'string' ? data.name : '';\n        this.system = !!data.system;\n\n        // rules\n        this.listRule   = typeof data.listRule   === 'string' ? data.listRule   : null;\n        this.viewRule   = typeof data.viewRule   === 'string' ? data.viewRule   : null;\n        this.createRule = typeof data.createRule === 'string' ? data.createRule : null;\n        this.updateRule = typeof data.updateRule === 'string' ? data.updateRule : null;\n        this.deleteRule = typeof data.deleteRule === 'string' ? data.deleteRule : null;\n\n        // schema\n        data.schema = Array.isArray(data.schema) ? data.schema : [];\n        this.schema = [];\n        for (let field of data.schema) {\n            this.schema.push(new SchemaField(field));\n        }\n    }\n}\n", "import CrudService from '@/services/utils/CrudService';\nimport Collection  from '@/models/Collection';\n\nexport default class Collections extends CrudService<Collection> {\n    /**\n     * @inheritdoc\n     */\n    decode(data: { [key: string]: any }): Collection {\n        return new Collection(data);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    baseCrudPath(): string {\n        return '/api/collections';\n    }\n\n    /**\n     * Imports the provided collections.\n     *\n     * If `deleteMissing` is `true`, all local collections and schema fields,\n     * that are not present in the imported configuration, WILL BE DELETED\n     * (including their related records data)!\n     */\n    async import(collections: Array<Collection>, deleteMissing: boolean = false, queryParams = {}): Promise<true> {\n        return this.client.send(this.baseCrudPath() + '/import', {\n            'method': 'PUT',\n            'params': queryParams,\n            'body': {\n                'collections':  collections,\n                'deleteMissing': deleteMissing,\n            }\n        }).then(() => true);\n    }\n}\n", "import SubCrudService from '@/services/utils/SubCrudService';\nimport Record         from '@/models/Record';\n\nexport default class Records extends SubCrudService<Record> {\n    /**\n     * @inheritdoc\n     */\n    decode(data: { [key: string]: any }): Record {\n        return new Record(data);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    baseCrudPath(collectionIdOrName: string): string {\n        return '/api/collections/' + encodeURIComponent(collectionIdOrName) + '/records';\n    }\n\n    /**\n     * Builds and returns an absolute record file url.\n     */\n    getFileUrl(record: Record, filename: string, queryParams = {}): string {\n        const parts = [];\n        parts.push(this.client.baseUrl.replace(/\\/+$/gm, \"\"))\n        parts.push(\"api\")\n        parts.push(\"files\")\n        parts.push(record[\"@collectionId\"])\n        parts.push(record.id)\n        parts.push(filename)\n        let result = parts.join('/');\n\n        if (Object.keys(queryParams).length) {\n            const params = new URLSearchParams(queryParams);\n            result += (result.includes(\"?\") ? \"&\" : \"?\") + params;\n        }\n\n        return result\n    }\n}\n", "import BaseModel       from '@/models/utils/BaseModel';\nimport ListResult      from '@/models/utils/ListResult';\nimport BaseCrudService from '@/services/utils/BaseCrudService';\n\nexport default abstract class SubCrudService<M extends BaseModel> extends BaseCrudService<M> {\n    /**\n     * Base path for the crud actions (without trailing slash, eg. '/collections/{:sub}/records').\n     */\n    abstract baseCrudPath(sub: string): string\n\n    /**\n     * Returns a promise with all list items batch fetched at once.\n     */\n    getFullList(sub: string, batchSize = 100, queryParams = {}): Promise<Array<M>> {\n        return this._getFullList(this.baseCrudPath(sub), batchSize, queryParams);\n    }\n\n    /**\n     * Returns paginated items list.\n     */\n    getList(sub: string, page = 1, perPage = 30, queryParams = {}): Promise<ListResult<M>> {\n        return this._getList(this.baseCrudPath(sub), page, perPage, queryParams);\n    }\n\n    /**\n     * Returns single item by its id.\n     */\n    getOne(sub: string, id: string, queryParams = {}): Promise<M> {\n        return this._getOne(this.baseCrudPath(sub), id, queryParams);\n    }\n\n    /**\n     * Creates a new item.\n     */\n    create(sub: string, bodyParams = {}, queryParams = {}): Promise<M> {\n        return this._create(this.baseCrudPath(sub), bodyParams, queryParams);\n    }\n\n    /**\n     * Updates an existing item by its id.\n     */\n    update(sub: string, id: string, bodyParams = {}, queryParams = {}): Promise<M> {\n        return this._update(this.baseCrudPath(sub), id, bodyParams, queryParams);\n    }\n\n    /**\n     * Deletes an existing item by its id.\n     */\n    delete(sub: string, id: string, queryParams = {}): Promise<boolean> {\n        return this._delete(this.baseCrudPath(sub), id, queryParams);\n    }\n}\n", "import BaseModel from '@/models/utils/BaseModel';\n\nexport default class LogRequest extends BaseModel {\n    url!:       string;\n    method!:    string;\n    status!:    number;\n    auth!:      string;\n    remoteIp!:  string;\n    userIp!:    string;\n    referer!:   string;\n    userAgent!: string;\n    meta!:      null|{ [key: string]: any };\n\n    /**\n     * @inheritdoc\n     */\n    load(data: { [key: string]: any }) {\n        super.load(data);\n\n        // fallback to the ip field for backward compatability\n        data.remoteIp = data.remoteIp || data.ip;\n\n        this.url       = typeof data.url === 'string' ? data.url : '';\n        this.method    = typeof data.method === 'string' ? data.method : 'GET';\n        this.status    = typeof data.status === 'number' ? data.status : 200;\n        this.auth      = typeof data.auth === 'string' ? data.auth : 'guest';\n        this.remoteIp  = typeof data.remoteIp === 'string' ? data.remoteIp : '';\n        this.userIp    = typeof data.userIp === 'string' ? data.userIp : '';\n        this.referer   = typeof data.referer === 'string' ? data.referer : '';\n        this.userAgent = typeof data.userAgent === 'string' ? data.userAgent : '';\n        this.meta      = typeof data.meta === 'object' && data.meta !== null ? data.meta : {};\n    }\n}\n", "import LogRequest  from '@/models/LogRequest';\nimport ListResult  from '@/models/utils/ListResult';\nimport BaseService from '@/services/utils/BaseService';\n\nexport type HourlyStats = {\n    total: number,\n    date:  string,\n}\n\nexport default class Logs extends BaseService {\n    /**\n     * Returns paginated logged requests list.\n     */\n    getRequestsList(page = 1, perPage = 30, queryParams = {}): Promise<ListResult<LogRequest>> {\n        queryParams = Object.assign({\n            'page':    page,\n            'perPage': perPage,\n        }, queryParams);\n\n        return this.client.send('/api/logs/requests', {\n            'method': 'GET',\n            'params': queryParams,\n        }).then((responseData: any) => {\n            const items: Array<LogRequest> = [];\n            if (responseData?.items) {\n                responseData.items = responseData?.items || [];\n                for (const item of responseData.items) {\n                    items.push(new LogRequest(item));\n                }\n            }\n\n            return new ListResult<LogRequest>(\n                responseData?.page || 1,\n                responseData?.perPage || 0,\n                responseData?.totalItems || 0,\n                responseData?.totalPages || 0,\n                items,\n            );\n        });\n    }\n\n    /**\n     * Returns a single logged request by its id.\n     */\n    getRequest(id: string, queryParams = {}): Promise<LogRequest> {\n        return this.client.send('/api/logs/requests/' + encodeURIComponent(id), {\n            'method': 'GET',\n            'params': queryParams\n        }).then((responseData: any) => new LogRequest(responseData));\n    }\n\n    /**\n     * Returns request logs statistics.\n     */\n    getRequestsStats(queryParams = {}): Promise<Array<HourlyStats>> {\n        return this.client.send('/api/logs/requests/stats', {\n            'method': 'GET',\n            'params': queryParams\n        }).then((responseData: any) => responseData);\n    }\n}\n", "import BaseService from '@/services/utils/BaseService';\nimport Record      from '@/models/Record';\n\nexport interface MessageData {\n    [key: string]: any;\n    action: string;\n    record: Record;\n}\n\nexport interface SubscriptionFunc{\n    (data: MessageData):void;\n}\n\nexport default class Realtime extends BaseService {\n    private clientId: string = \"\";\n    private eventSource: EventSource | null = null;\n    private subscriptions: { [key: string]: EventListener } = {};\n\n    /**\n     * Inits the sse connection (if not already) and register the subscription.\n     */\n    async subscribe(subscription: string, callback: SubscriptionFunc): Promise<void> {\n        if (!subscription) {\n            throw new Error('subscription must be set.')\n        }\n\n        // unsubscribe existing\n        if (this.subscriptions[subscription]) {\n            this.eventSource?.removeEventListener(subscription, this.subscriptions[subscription]);\n        }\n\n        // register subscription\n        this.subscriptions[subscription] = function (e: Event) {\n            const msgEvent = (e as MessageEvent);\n\n            let data;\n            try {\n                data = JSON.parse(msgEvent?.data);\n            } catch {}\n\n            callback(data || {});\n        }\n\n        if (!this.eventSource) {\n            // start a new sse connection\n            this.connect();\n        } else if (this.clientId) {\n            // otherwise - just persist the updated subscriptions\n            await this.submitSubscriptions();\n        }\n    }\n\n    /**\n     * Unsubscribe from a subscription.\n     *\n     * If the `subscription` argument is not set,\n     * then the client will unsubscribe from all registered subscriptions.\n     *\n     * The related sse connection will be autoclosed if after the\n     * unsubscribe operations there are no active subscriptions left.\n     */\n    async unsubscribe(subscription?: string): Promise<void> {\n        if (!subscription) {\n            // remove all subscriptions\n            this.removeSubscriptionListeners();\n            this.subscriptions = {};\n        } else if (this.subscriptions[subscription]) {\n            // remove a single subscription\n            this.eventSource?.removeEventListener(subscription, this.subscriptions[subscription]);\n            delete this.subscriptions[subscription];\n        } else {\n            // not subscribed to the specified subscription\n            return\n        }\n\n        if (this.clientId) {\n            await this.submitSubscriptions();\n        }\n\n        // no more subscriptions -> close the sse connection\n        if (!Object.keys(this.subscriptions).length) {\n            this.disconnect();\n        }\n    }\n\n    private async submitSubscriptions(): Promise<boolean> {\n        // optimistic update\n        this.addSubscriptionListeners();\n\n        return this.client.send('/api/realtime', {\n            'method': 'POST',\n            'body': {\n                'clientId': this.clientId,\n                'subscriptions': Object.keys(this.subscriptions),\n            },\n            'params': {\n                '$autoCancel': false,\n            },\n        }).then(() => true);\n    }\n\n    private addSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        this.removeSubscriptionListeners();\n\n        for (let sub in this.subscriptions) {\n            this.eventSource.addEventListener(sub, this.subscriptions[sub]);\n        }\n    }\n\n    private removeSubscriptionListeners(): void {\n        if (!this.eventSource) {\n            return;\n        }\n\n        for (let sub in this.subscriptions) {\n            this.eventSource.removeEventListener(sub, this.subscriptions[sub]);\n        }\n    }\n\n    private connectHandler(e: Event): void {\n        const msgEvent = (e as MessageEvent);\n        this.clientId = msgEvent?.lastEventId;\n        this.submitSubscriptions();\n    }\n\n    private connect(): void {\n        this.disconnect();\n        this.eventSource = new EventSource(this.client.buildUrl('/api/realtime'))\n        this.eventSource.addEventListener('PB_CONNECT', (e) => this.connectHandler(e));\n    }\n\n    private disconnect(): void {\n        this.removeSubscriptionListeners();\n        this.eventSource?.removeEventListener('PB_CONNECT', (e) => this.connectHandler(e));\n        this.eventSource?.close();\n        this.eventSource = null;\n        this.clientId = \"\";\n    }\n}\n", "import ClientResponseError from '@/ClientResponseError';\nimport BaseAuthStore       from '@/stores/BaseAuthStore';\nimport LocalAuthStore      from '@/stores/LocalAuthStore';\nimport Settings            from '@/services/Settings';\nimport Admins              from '@/services/Admins';\nimport Users               from '@/services/Users';\nimport Collections         from '@/services/Collections';\nimport Records             from '@/services/Records';\nimport Logs                from '@/services/Logs';\nimport Realtime            from '@/services/Realtime';\n\n/**\n * PocketBase JS Client.\n */\nexport default class Client {\n    /**\n     * The base PocketBase backend url address (eg. 'http://127.0.0.1.8090').\n     */\n    baseUrl: string;\n\n    /**\n     * Hook that get triggered right before sending the fetch request,\n     * allowing you to inspect/modify the request config.\n     *\n     * Returns the new modified config that will be used to send the request.\n     *\n     * For list of the possible options check https://developer.mozilla.org/en-US/docs/Web/API/fetch#options\n     *\n     * Example:\n     * ```js\n     * client.beforeSend = function (url, reqConfig) {\n     *     reqConfig.headers = Object.assign({}, reqConfig.headers, {\n     *         'X-Custom-Header': 'example',\n     *     });\n     *\n     *     return reqConfig;\n     * };\n     * ```\n     */\n    beforeSend?: (url: string, reqConfig: { [key: string]: any }) => { [key: string]: any };\n\n    /**\n     * Hook that get triggered after successfully sending the fetch request,\n     * allowing you to inspect/modify the response object and its parsed data.\n     *\n     * Returns the new Promise resolved `data` that will be returned to the client.\n     *\n     * Example:\n     * ```js\n     * client.afterSend = function (response, data) {\n     *     if (response.status != 200) {\n     *         throw new ClientResponseError({\n     *             url:      response.url,\n     *             status:   response.status,\n     *             data:     data,\n     *         });\n     *     }\n     *\n     *     return data;\n     * };\n     * ```\n     */\n    afterSend?: (response: Response, data: any) => any;\n\n    /**\n     * Optional language code (default to `en-US`) that will be sent\n     * with the requests to the server as `Accept-Language` header.\n     */\n    lang: string;\n\n    /**\n     * A replaceable instance of the local auth store service.\n     */\n    authStore: BaseAuthStore;\n\n    /**\n     * An instance of the service that handles the **Settings APIs**.\n     */\n    readonly settings: Settings;\n\n    /**\n     * An instance of the service that handles the **Admin APIs**.\n     */\n    readonly admins: Admins;\n\n    /**\n     * An instance of the service that handles the **User APIs**.\n     */\n    readonly users: Users;\n\n    /**\n     * An instance of the service that handles the **Collection APIs**.\n     */\n    readonly collections: Collections;\n\n    /**\n     * An instance of the service that handles the **Record APIs**.\n     */\n    readonly records: Records;\n\n    /**\n     * An instance of the service that handles the **Log APIs**.\n     */\n    readonly logs: Logs;\n\n    /**\n     * An instance of the service that handles the **Realtime APIs**.\n     */\n    readonly realtime: Realtime;\n\n    private cancelControllers: { [key: string]: AbortController } = {}\n\n    constructor(\n        baseUrl = '/',\n        lang = 'en-US',\n        authStore?: BaseAuthStore | null,\n    ) {\n        this.baseUrl   = baseUrl;\n        this.lang      = lang;\n        this.authStore = authStore || new LocalAuthStore();\n\n        // services\n        this.admins      = new Admins(this);\n        this.users       = new Users(this);\n        this.records     = new Records(this);\n        this.collections = new Collections(this);\n        this.logs        = new Logs(this);\n        this.settings    = new Settings(this);\n        this.realtime    = new Realtime(this);\n    }\n\n    /**\n     * @deprecated Legacy alias for `this.authStore`.\n     */\n    get AuthStore(): BaseAuthStore {\n        return this.authStore;\n    };\n\n    /**\n     * @deprecated Legacy alias for `this.settings`.\n     */\n    get Settings(): Settings {\n        return this.settings;\n    };\n\n    /**\n     * @deprecated Legacy alias for `this.admins`.\n     */\n    get Admins(): Admins {\n        return this.admins;\n    };\n\n    /**\n     * @deprecated Legacy alias for `this.users`.\n     */\n    get Users(): Users {\n        return this.users;\n    };\n\n    /**\n     * @deprecated Legacy alias for `this.collections`.\n     */\n    get Collections(): Collections {\n        return this.collections;\n    };\n\n    /**\n     * @deprecated Legacy alias for `this.records`.\n     */\n    get Records(): Records {\n        return this.records;\n    };\n\n    /**\n     * @deprecated Legacy alias for `this.logs`.\n     */\n    get Logs(): Logs {\n        return this.logs;\n    };\n\n    /**\n     * @deprecated Legacy alias for `this.realtime`.\n     */\n    get Realtime(): Realtime {\n        return this.realtime;\n    };\n\n    /**\n     * Cancels single request by its cancellation key.\n     */\n    cancelRequest(cancelKey: string): Client {\n        if (this.cancelControllers[cancelKey]) {\n            this.cancelControllers[cancelKey].abort();\n            delete this.cancelControllers[cancelKey];\n        }\n\n        return this;\n    }\n\n    /**\n     * Cancels all pending requests.\n     */\n    cancelAllRequests(): Client {\n        for (let k in this.cancelControllers) {\n            this.cancelControllers[k].abort();\n        }\n\n        this.cancelControllers = {};\n\n        return this;\n    }\n\n    /**\n     * Sends an api http request.\n     */\n    async send(path: string, reqConfig: { [key: string]: any }): Promise<any> {\n        let config = Object.assign({ method: 'GET' } as { [key: string]: any }, reqConfig);\n\n        // serialize the body if needed and set the correct content type\n        // note1: for FormData body the Content-Type header should be skipped\n        // note2: we are checking the constructor name because FormData is not available natively in node\n        if (config.body && config.body.constructor.name !== 'FormData') {\n            if (typeof config.body !== 'string') {\n                config.body = JSON.stringify(config.body);\n            }\n\n            // add the json header (if not already)\n            if (typeof config?.headers?.['Content-Type'] === 'undefined') {\n                config.headers = Object.assign({}, config.headers, {\n                    'Content-Type': 'application/json',\n                });\n            }\n        }\n\n        // add Accept-Language header (if not already)\n        if (typeof config?.headers?.['Accept-Language'] === 'undefined') {\n            config.headers = Object.assign({}, config.headers, {\n                'Accept-Language': this.lang,\n            });\n        }\n\n        // check if Authorization header can be added\n        if (\n            // has stored token\n            this.authStore?.token &&\n            // auth header is not explicitly set\n            (typeof config?.headers?.Authorization === 'undefined')\n        ) {\n            let authType = 'Admin';\n            if (typeof (this.authStore.model as any)?.verified !== 'undefined') {\n                authType = 'User'; // admins don't have verified\n            }\n\n            config.headers = Object.assign({}, config.headers, {\n                'Authorization': (authType + ' ' + this.authStore.token),\n            });\n        }\n\n        // handle auto cancelation for duplicated pending request\n        if (config.params?.$autoCancel !== false) {\n            const cancelKey = config.params?.$cancelKey || ((config.method || 'GET') + path);\n\n            // cancel previous pending requests\n            this.cancelRequest(cancelKey);\n\n            const controller = new AbortController();\n            this.cancelControllers[cancelKey] = controller;\n            config.signal = controller.signal;\n        }\n        // remove the special cancellation params from the other valid query params\n        delete config.params?.$autoCancel;\n        delete config.params?.$cancelKey;\n\n        // build url + path\n        let url = this.buildUrl(path);\n\n        // serialize the query parameters\n        if (typeof config.params !== 'undefined') {\n            const query = this.serializeQueryParams(config.params)\n            if (query) {\n                url += (url.includes('?') ? '&' : '?') + query;\n            }\n            delete config.params;\n        }\n\n        if (this.beforeSend) {\n            config = Object.assign({}, this.beforeSend(url, config));\n        }\n\n        // send the request\n        return fetch(url, config)\n            .then(async (response) => {\n                let data : any = {};\n\n                try {\n                    data = await response.json();\n                } catch (_) {\n                    // all api responses are expected to return json\n                    // with the exception of the realtime event and 204\n                }\n\n                if (this.afterSend) {\n                    data = this.afterSend(response, data);\n                }\n\n                if (response.status >= 400) {\n                    throw new ClientResponseError({\n                        url:      response.url,\n                        status:   response.status,\n                        data:     data,\n                    });\n                }\n\n                return data;\n            }).catch((err) => {\n                // wrap to normalize all errors\n                throw new ClientResponseError(err);\n            });\n    }\n\n    /**\n     * Builds a full client url by safely concatenating the provided path.\n     */\n    buildUrl(path: string): string {\n        let url = this.baseUrl + (this.baseUrl.endsWith('/') ? '' : '/');\n        if (path) {\n            url += (path.startsWith('/') ? path.substring(1) : path);\n        }\n        return url;\n    }\n\n    /**\n     * Serializes the provided query parameters into a query string.\n     */\n    private serializeQueryParams(params: {[key: string]: any}): string {\n        const result: Array<string> = [];\n        for (const key in params) {\n            if (params[key] === null) {\n                // skip null query params\n                continue;\n            }\n\n            const value = params[key];\n            const encodedKey = encodeURIComponent(key);\n\n            if (Array.isArray(value)) {\n                // \"repeat\" array params\n                for (const v of value) {\n                    result.push(encodedKey + \"=\" + encodeURIComponent(v));\n                }\n            } else if (value instanceof Date) {\n                result.push(encodedKey + \"=\" + encodeURIComponent(value.toISOString()));\n            } else if (typeof value !== null && typeof value === 'object') {\n                result.push(encodedKey + \"=\" + encodeURIComponent(JSON.stringify(value)));\n            } else {\n                result.push(encodedKey + \"=\" + encodeURIComponent(value));\n            }\n        }\n\n        return result.join('&');\n    }\n}\n", "import d from \"./node_modules/pocketbase/dist/pocketbase.es.mjs\";export default d;\nexport * from \"./node_modules/pocketbase/dist/pocketbase.es.mjs\""],
  "mappings": "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",
  "names": ["atobPolyfill", "ClientResponseError", "_super", "errData", "n", "_this", "this", "call", "url", "status", "data", "isAbort", "originalError", "Object", "setPrototypeOf", "prototype", "DOMException", "name", "message", "_a", "o", "__extends", "toJSON", "__assign", "Error", "fieldContentRegExp", "cookieSerialize", "val", "options", "opt", "assign", "encode", "defaultEncode", "test", "TypeError", "value", "result", "maxAge", "isNaN", "isFinite", "Math", "floor", "domain", "path", "expires", "toString", "Date", "valueOf", "toUTCString", "httpOnly", "secure", "priority", "toLowerCase", "sameSite", "defaultDecode", "indexOf", "decodeURIComponent", "encodeURIComponent", "getTokenPayload", "token", "base64", "split", "map", "c", "charCodeAt", "slice", "join", "JSON", "parse", "e", "atob", "a", "Buffer", "from", "BaseModel", "load", "id", "created", "updated", "defineProperty", "get", "clone", "constructor", "stringify", "export", "Record", "_i", "entries", "length", "_b", "key", "User", "email", "verified", "lastResetSentAt", "lastVerificationSentAt", "profile", "Admin", "avatar", "BaseAuthStore", "baseToken", "baseModel", "_onChangeCallbacks", "expirationThreshold", "payload", "keys", "exp", "now", "save", "model", "triggerChange", "clear", "loadFromCookie", "cookie", "rawData", "str", "decode", "index", "eqIdx", "endIdx", "lastIndexOf", "trim", "_", "Array", "isArray", "exportToCookie", "defaultOptions", "resultLength", "Blob", "size", "_c", "onChange", "callback", "push", "i", "splice", "LocalAuthStore", "storageKey", "storageFallback", "_storageGet", "t", "_storageSet", "_storageRemove", "window", "localStorage", "rawValue", "getItem", "normalizedVal", "setItem", "removeItem", "BaseService", "client", "Settings", "getAll", "queryParams", "send", "method", "params", "then", "responseData", "update", "bodyParams", "body", "testS3", "testEmail", "toEmail", "emailTemplate", "template", "ListResult", "page", "perPage", "totalItems", "totalPages", "items", "BaseCrudService", "_getFullList", "basePath", "batchSize", "request", "__awaiter", "_getList", "list", "castedList", "concat", "item", "_getOne", "_create", "_update", "_delete", "CrudService", "getFullList", "baseCrudPath", "getList", "getOne", "create", "delete", "Admins", "authResponse", "admin", "authStore", "authViaEmail", "password", "headers", "Authorization", "bind", "refresh", "requestPasswordReset", "confirmPasswordReset", "passwordResetToken", "passwordConfirm", "ExternalAuth", "userId", "provider", "providerId", "Users", "user", "listAuthMethods", "emailPassword", "authProviders", "authViaOAuth2", "code", "codeVerifier", "redirectUrl", "requestVerification", "confirmVerification", "verificationToken", "requestEmailChange", "newEmail", "confirmEmailChange", "emailChangeToken", "listExternalAuths", "responseData_1", "unlinkExternalAuth", "SchemaField", "type", "system", "required", "unique", "Collection", "listRule", "viewRule", "createRule", "updateRule", "deleteRule", "schema", "field", "Collections", "import", "collections", "deleteMissing", "Records", "collectionIdOrName", "getFileUrl", "record", "filename", "parts", "baseUrl", "replace", "URLSearchParams", "includes", "SubCrudService", "sub", "LogRequest", "remoteIp", "ip", "auth", "userIp", "referer", "userAgent", "meta", "Logs", "getRequestsList", "getRequest", "getRequestsStats", "Realtime", "apply", "arguments", "clientId", "eventSource", "subscriptions", "subscribe", "subscription", "removeEventListener", "msgEvent", "connect", "submitSubscriptions", "sent", "unsubscribe", "removeSubscriptionListeners", "disconnect", "addSubscriptionListeners", "$autoCancel", "addEventListener", "connectHandler", "lastEventId", "EventSource", "buildUrl", "close", "Client", "lang", "cancelControllers", "admins", "users", "records", "logs", "settings", "realtime", "cancelRequest", "cancelKey", "abort", "cancelAllRequests", "k", "reqConfig", "config", "_d", "authType", "_e", "_f", "_g", "$cancelKey", "controller", "AbortController", "signal", "_h", "_j", "query", "serializeQueryParams", "beforeSend", "fetch", "response", "json", "afterSend", "catch", "err", "endsWith", "startsWith", "substring", "encodedKey", "r", "value_1", "v", "toISOString"]
}
